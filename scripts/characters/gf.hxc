import funkin.play.character.SparrowCharacter;
import funkin.play.PlayState;
import flixel.FlxG;
import flixel.FlxSprite;
import flixel.group.FlxTypedSpriteGroup;
import funkin.graphics.FunkinSprite;
import funkin.modding.base.ScriptedFlxAtlasSprite;
import funkin.modding.base.ScriptedFlxSprite;
import funkin.modding.base.ScriptedFlxSpriteGroup;
import flixel.addons.display.FlxRuntimeShader;
import funkin.graphics.adobeanimate.FlxAtlasSprite;
import funkin.modding.base.ScriptedFlxRuntimeShader;
import funkin.graphics.shaders.AdjustColorShader;
import funkin.graphics.adobeanimate.FlxAtlasSprite;
import flixel.FlxG;
import funkin.audio.FunkinSound;
import funkin.play.character.SparrowCharacter;
import funkin.play.GameOverSubState;
import funkin.play.character.BaseCharacter;
import funkin.play.character.CharacterDataParser;
import funkin.play.character.CharacterType;
import funkin.play.PlayState;
import flixel.util.FlxTimer;
import flixel.util.FlxTimerManager;

class GirlfriendCharacter extends SparrowCharacter
{

	var canShame:bool=true;
	//var timerManager:FlxTimerManager;

	function new() 
	{
		super('gf');

	}

	override function onAdd() 
	{
		if (!debug && this.characterType == CharacterType.DAD) 
		{
     			// If Girlfriend is the opponent, set her position to the stage's assigned Girlfriend position,
      			// while maintaining her status as an opponent. This allows the Girlfriend character to use a shared
     			// character file without weird offsets.

			var pos:FlxPoint = PlayState.instance.currentStage.getGirlfriendPosition();

			this.originalPosition.x = pos.x - this.characterOrigin.x;
			this.originalPosition.y = pos.y - this.characterOrigin.y;

			this.resetPosition();

			canShame=true;
		}
	}

	override function dance(force:Bool)
	{
		// Fix animation glitches with Week 3.
		// Wait for 'hairBlow' to play, preventing dancing from interrupting it.
		if (!force && ['hairBlow'].contains(getCurrentAnimation())) return;
		// Wait for 'hairFall' to finish, preventing dancing from interrupting it.
		if (!force && ['hairFall'].contains(getCurrentAnimation()) && !isAnimationFinished()) return;

		super.dance(force);
	}

	function shameBF():void
	{
		var loseSprite:FlxAtlasSprite;
		//canShame=false;
		loseSprite = ScriptedFlxAtlasSprite.init('LoseScriptedSprite', 0, 0);
		PlayState.instance.currentStage.add(loseSprite);
		loseSprite.x = this.x;
		loseSprite.y = this.y + 600;
		loseSprite.zIndex = this.zIndex + 1;
		loseSprite.scale.set(0.65, 0.65);

		loseSprite.scriptCall('playCutscene');
		//timerManager = new FlxTimerManager()
		//new FlxTimer(timerManager).start(4, _ -> {

		//	canShame=true;
		//});
	}

	override function playComboDropAnimation(comboCount:Int):Void
	{
		var comboLength:int = comboCount;

		super.playComboDropAnimation(comboCount);

		if (comboLength > 50)
		{
			shameBF();
		}
	}
}