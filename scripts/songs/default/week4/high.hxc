import funkin.play.PlayState;
import funkin.play.song.Song;
import flixel.FlxG;
import funkin.save.Save;
import funkin.data.story.level.LevelRegistry;

class HighSong extends Song
{

  public function new()
  {
    super('high');
  }

  public override function listAltInstrumentalIds(difficultyId:String, variationId:String):Array<String>
  {
    var results:Array<String> = super.listAltInstrumentalIds(difficultyId, variationId);

    if (difficultyId == 'easy' || difficultyId == 'normal' || difficultyId == 'hard')
    {
      var hasBeatenPicoMix = Save.instance.hasBeatenSong(this.id, null, 'pico');
      if (!hasBeatenPicoMix) results.remove('pico');

      var hasBeatenErectRemix = Save.instance.hasBeatenSong(this.id, 'erect', 'erect');
      if (hasBeatenErectRemix == false) hasBeatenErectRemix = Save.instance.hasBeatenSong(this.id, 'nightmare', 'erect');
      if (hasBeatenErectRemix) results.remove('erect');
    
    }

    return results;
    //return ['erect'];
  }

  public override function isSongNew(currentDifficulty:String, currentVariation:String):Bool
  {
    if (currentVariation == '' || currentVariation == 'default') return !Save.instance.hasBeatenSong(this.id, null, this.variation);

    return false;
  }

  function onSongStart(event:ScriptEvent):Void
  {
    super.onSongStart(event);
    
    if (FlxG.sound.music != null)
    {
      if (PlayState.instance.currentInstrumental == 'erect') //if we using the erect instrumental
      {
        FlxG.sound.music.volume = 0.675;
      }
    }
  }

  function onSongRetry(event:ScriptEvent)
  {
    super.onSongRetry(event);

    if (FlxG.sound.music != null)
    {
      if (PlayState.instance.currentInstrumental == 'erect') //if we using the erect instrumental
      {
        FlxG.sound.music.volume = 0.675;
      }
    }
  }

  
  public function listDifficulties(variationId:String, variationIds:Array<String>, showLocked:Bool, showHidden:Bool):Array<String>
  {
    if (showLocked || showHidden) return super.listDifficulties(variationId, variationIds);
    
    if (LevelRegistry.instance.fetchEntry('week4').isUnlocked() && Save.instance.hasBeatenSong(this.id, null, this.variation))
    {
      return super.listDifficulties(variationId, variationIds);
    }
    else
    {
      return[];
    }
  }
}
