import funkin.play.song.Song;
import funkin.play.PlayState;
import funkin.save.Save;
import funkin.play.PlayStatePlaylist;
import funkin.util.Constants;
import funkin.modding.base.ScriptedFlxSpriteGroup;
import funkin.play.cutscene.VideoCutscene;
import openfl.filters.ShaderFilter;
import funkin.graphics.shaders.DropShadowScreenspace;
import flixel.FlxCamera;
import flixel.FlxG;
import flixel.math.FlxPoint;
import funkin.graphics.adobeanimate.FlxAtlasSprite;
import funkin.modding.base.ScriptedFlxAtlasSprite;
import funkin.audio.FunkinSound;
import funkin.play.stage.Stage;
import funkin.graphics.FunkinSprite;
import flixel.tweens.FlxEase;
import flixel.tweens.FlxTween;
import flixel.util.FlxTimer;
import flixel.util.FlxTimerManager;
import flixel.FlxG;
import flixel.FlxSprite;
import flixel.math.FlxBasePoint;
import flixel.tweens.FlxEase;
import flixel.tweens.FlxTween;
import flixel.util.FlxTimer;
import funkin.audio.FunkinSound;
import funkin.Conductor;
import funkin.graphics.adobeanimate.FlxAtlasSprite;
import funkin.graphics.FunkinSprite;
import funkin.modding.base.ScriptedFlxAtlasSprite;
import funkin.play.character.SparrowCharacter;
import funkin.play.cutscene.CutsceneType;
import funkin.play.GameOverSubState;
import funkin.play.PlayState;
import funkin.play.PlayStatePlaylist;
import funkin.play.song.Song;
import funkin.play.stage.StageProp;
import funkin.save.Save;
import flixel.text.FlxText;
import flixel.text.FlxTextBorderStyle;
import funkin.util.TouchUtil;
import funkin.ui.FullScreenScaleMode;

class StressSong extends Song
{
  var hasPlayedCutscene:Bool = false;
  var cutsceneSkipped:Bool = false;
  var canSkipCutscene:Bool = false;
  var StressCutsceneSnd:FunkinSound;
  var skipText:FlxText;
  var isMobilePauseButtonPressed:Bool = false;
  var tankmanGroup:TankmanSpriteGroup = null;
  var tankCutscene:ScriptedFlxAtlasSprite;
  var girlCutscene:ScriptedFlxAtlasSprite;
  var girlFaceplant:ScriptedFlxAtlasSprite;
  var noGf:bool;

  public function new()
  {
    super('stress');

    hasPlayedCutscene = false;
    hasPlayedCutscene = false;
    cutsceneSkipped = false;
    canSkipCutscene = false;

  }

  public function onSongLoaded(event:SongLoadScriptEvent):Void
  {
    super.onSongLoaded(event);

    hasPlayedCutscene = false;
    cutsceneSkipped = false;
    canSkipCutscene = false;

  }

  public override function isSongNew(currentDifficulty:String, currentVariation:String):Bool
  {
    if (currentVariation == 'pico') return !Save.instance.hasBeatenSong(this.id, null, 'pico');

    return false;
  }

  public override function listAltInstrumentalIds(difficultyId:String, variationId:String):Array<String>
  {
    if (difficultyId == 'easy' || difficultyId == 'normal' || difficultyId == 'hard')
    {
      var hasBeatenPicoMix = Save.instance.hasBeatenSong(this.id, null, 'pico');

      switch (variationId)
      {
        case 'pico':
          // return hasBeatenPicoMix ? [''] : [];
          // No Pico mix on BF instrumental, sorry!
          return [];
        default:
          return hasBeatenPicoMix ? ['pico'] : [];
      }
    }

    return [];
  }

  public override function onCountdownStart(event:CountdownScriptEvent):Void
  {
    super.onCountdownStart(event);

    // start cutscene if it hasnt played and is story mode
    if (hasPlayedCutscene == false && PlayStatePlaylist.isStoryMode && PlayState.instance.currentVariation != 'erect')
    {
      event.cancel();
      startVideo(PlayState.instance.currentVariation == 'pico');
      hasPlayedCutscene = true;
      if (!cutsceneSkipped) PlayState.instance.currentStage.getBoyfriend().playAnimation('idle', true, true);
    }
    // start cutscene if it hasnt played and player wants freeplay cutscenes
    if (hasPlayedCutscene == false && FlxG.save.data.freeplayCutscenes == true && PlayState.instance.currentVariation != 'erect')
    {
      event.cancel();
      startVideo(PlayState.instance.currentVariation == 'pico');
      hasPlayedCutscene = true;
    }

    if (tankmanGroup != null && !tankmanGroup.scriptCall('isValid'))
    {
      // Destroy the tankman group if it's not valid.
      tankmanGroup.destroy();
      PlayState.instance.currentStage.remove(tankmanGroup);
      tankmanGroup = null;
    }

    if (tankmanGroup == null)
    {
      // Initialize the tankman group if it's not available.
      trace('Initializing tankman group... ' + PlayState.instance.currentVariation);
      tankmanGroup = ScriptedFlxSpriteGroup.init('TankmanSpriteGroup', PlayState.instance.currentVariation != 'default');
    }

    if (tankmanGroup != null)
    {
      // resets the tankmen!
      tankmanGroup.scriptCall('reset');

      tankmanGroup.zIndex = 30;
      PlayState.instance.currentStage.add(tankmanGroup);
      PlayState.instance.currentStage.refresh();
    }
    else
    {
      trace('Failed to initialize tankman group!');
    }
  }

  function onSongStart(event:ScriptEvent):Void
  {
    super.onSongStart(event);
  }

  function bfCutscene():Void
  {
    skipText = new FlxText(936 * FullScreenScaleMode.wideScale.x, 618 * FullScreenScaleMode.wideScale.y, 0,
      'Skip [ ' + PlayState.instance.controls.getDialogueNameFromToken("CUTSCENE_ADVANCE", true) + ' ]', 20);
    if (FlxG.onMobile)
    {
      skipText.text = 'Skip [Pause Button]';
      skipText.x -= 136;
    }
    skipText.setFormat(Paths.font('vcr.ttf'), 40, 0xFFFFFFFF, "right", FlxTextBorderStyle.OUTLINE, 0xFF000000);
    skipText.scrollFactor.set();
    skipText.borderSize = 2;
    skipText.alpha = 0;
    PlayState.instance.currentStage.add(skipText);

    skipText.cameras = [PlayState.instance.camCutscene];

    PlayState.instance.currentStage.refresh(); // Apply z-index.

    var distortoMus:FunkinSound;
    distortoMus = FunkinSound.load(Paths.music('DISTORTO'));

    if (!cutsceneSkipped) PlayState.instance.isInCutscene = true;

    if (!cutsceneSkipped) FlxTween.tween(PlayState.instance.camHUD, {alpha: 0}, 1);
    if (!cutsceneSkipped) PlayState.instance.tweenCameraZoom(0.85, 5, true, FlxEase.quadInOut);
    if (!cutsceneSkipped) PlayState.instance.tweenCameraToPosition(645, 490, 5, FlxEase.expoOut);

    new FlxTimer().start(0.15, function(tmr) 
    {
      if (!cutsceneSkipped) StressCutsceneSnd = FunkinSound.load(Paths.sound('stressCutscene'), 1);
      if (!cutsceneSkipped) StressCutsceneSnd.volume = 1;
      if (!cutsceneSkipped) StressCutsceneSnd.play(false);
    });

    //create tankman and start animation
    if (!cutsceneSkipped) PlayState.instance.currentStage.getDad().visible = false;
    if (!cutsceneSkipped) tankCutscene = ScriptedFlxAtlasSprite.init('StressIntroTankman', 0, 0);
    if (!cutsceneSkipped) tankCutscene.x = tankCutscene.x + 432;
    if (!cutsceneSkipped) tankCutscene.y = tankCutscene.y + 545;
    if (!cutsceneSkipped) tankCutscene.zIndex = PlayState.instance.currentStage.getDad().zIndex;
    if (!cutsceneSkipped) PlayState.instance.currentStage.add(tankCutscene);
    if (!cutsceneSkipped) PlayState.instance.currentStage.refresh(); // Apply z-index.
    if (!cutsceneSkipped) tankCutscene.scriptCall('playCutscene');

    //create purple gf and start animation
    if (!cutsceneSkipped) PlayState.instance.currentStage.getGirlfriend().visible = false;
    //if (!cutsceneSkipped) PlayState.instance.currentStage.getGirlfriend().alpha = 0.5;
    if (!cutsceneSkipped) girlCutscene = ScriptedFlxAtlasSprite.init('StressIntroGirlfriend', 0, 0);
    if (!cutsceneSkipped) girlCutscene.x = - 525;
    if (!cutsceneSkipped) girlCutscene.y = - 375;
    if (!cutsceneSkipped) girlCutscene.zIndex = PlayState.instance.currentStage.getGirlfriend().zIndex;
    if (!cutsceneSkipped) PlayState.instance.currentStage.add(girlCutscene);
    if (!cutsceneSkipped) PlayState.instance.currentStage.refresh(); // Apply z-index.
    if (!cutsceneSkipped) girlCutscene.scriptCall('playCutscene');

    new FlxTimer().start(15, function(tmr) 
    {
    if (!cutsceneSkipped) PlayState.instance.tweenCameraZoom(1.25, 2.25, true, FlxEase.quadInOut);
    if (!cutsceneSkipped) PlayState.instance.tweenCameraToPosition(645, 350, 1.5, FlxEase.expoOut);
    });

    new FlxTimer().start(17.25, function(tmr) 
    {
    if (!cutsceneSkipped) PlayState.instance.tweenCameraZoom(0.9, 0.5, true, FlxEase.quadInOut);
    if (!cutsceneSkipped) PlayState.instance.tweenCameraToPosition(645, 490, 0.5, FlxEase.expoOut);
    });


    if (!cutsceneSkipped) new FlxTimer().start(17.25, function(tmr) 
    {
      //catch gf of let her fall?
       if (FlxG.random.bool(97.5) == true) //DONT CHANGE THIS it'll make it more rewarding if you get it by chance
       {
        //Catch her
        if (!cutsceneSkipped) PlayState.instance.currentStage.getBoyfriend().scriptCall('changeVisibility', false);
        if (!cutsceneSkipped) PlayState.instance.currentStage.getBoyfriend().playAnimation('bfCatch', true, true);
       }
       else
       {
        //gf faceplants in the ground :( something was too big for bf to carry this time. Look at her on the ground there :/
        if (!cutsceneSkipped) PlayState.instance.currentStage.getBoyfriend().scriptCall('changeVisibility', true);
        if (!cutsceneSkipped) PlayState.instance.currentStage.getBoyfriend().scriptCall('getBf').visible = true;
        if (!cutsceneSkipped) PlayState.instance.currentStage.getBoyfriend().scriptCall('getBf').playAnimation('dodge', true, true);
        if (!cutsceneSkipped) PlayState.instance.currentStage.getBoyfriend().alpha = 0;
        if (!cutsceneSkipped) noGf = true;
        //if (!cutsceneSkipped) distortoMus.play(false); //debug I couldnt tell if it was working
        //if (!cutsceneSkipped) distortoMus.looped = true;
        //if (!cutsceneSkipped) distortoMus.volume = 0.5;
        if (!cutsceneSkipped) girlFaceplant = ScriptedFlxAtlasSprite.init('StressIntroGirlfriendFaceplant', 0, 0);
        if (!cutsceneSkipped) girlFaceplant.x = 512;
        if (!cutsceneSkipped) girlFaceplant.y = 375;
        if (!cutsceneSkipped) PlayState.instance.currentStage.add(girlFaceplant);
        if (!cutsceneSkipped) girlFaceplant.zIndex = PlayState.instance.currentStage.getBoyfriend().zIndex + 10;
        if (!cutsceneSkipped) PlayState.instance.currentStage.refresh(); // Apply z-index.
        if (!cutsceneSkipped) girlFaceplant.scriptCall('playCutscene');
       }
    });

    new FlxTimer().start(18.5, function(tmr) 
    {
    if (!cutsceneSkipped && noGf != true) PlayState.instance.currentStage.getBoyfriend().playAnimation('idle', true, true);
    });

    new FlxTimer().start(33, function(tmr) 
    {
    if (!cutsceneSkipped) PlayState.instance.currentStage.getBoyfriend().playAnimation('singUPmiss', true, true);
    });

      //cutscene over. let's stress
      new FlxTimer().start(35.0, function(tmr) 
      {
      if (!cutsceneSkipped) 
      {
        var bf =  PlayState.instance.currentStage.getBoyfriend();
        PlayState.instance.tweenCameraToPosition(bf.x - 160, bf.y + 80, 2, FlxEase.expoOut);
        PlayState.instance.isInCutscene = false;
        PlayState.instance.currentStage.getDad().visible = true;
        PlayState.instance.currentStage.getGirlfriend().visible = true;
        //PlayState.instance.currentStage.getBoyfriend().visible = true;
        tankCutscene.kill();
        girlCutscene.kill();
        FlxTween.tween(skipText, {alpha: 0}, 0.5, {ease: FlxEase.quadOut});
        cutsceneSkipped = true;
        canSkipCutscene = false;
        FlxTween.tween(PlayState.instance.camHUD, {alpha: 1}, 1);
          new FlxTimer().start(0.5, function(tmr) {
          PlayState.instance.startCountdown();
          PlayState.instance.tweenCameraZoom(0.9, 1, true, FlxEase.quadInOut);
          PlayState.instance.currentStage.getBoyfriend().danceEvery = 1;
          PlayState.instance.currentStage.getDad().danceEvery = 1;
          PlayState.instance.currentStage.getGirlfriend().danceEvery = 1;
        });
      }
      });
  }

  function picoCutscene():Void
  {

  }

  function startVideo(usePicoVideo:Bool)
  {
    if (usePicoVideo == true) picoCutscene();
    if (usePicoVideo != true) bfCutscene();
  }
  function onSongRetry(event:ScriptEvent)
  {
    super.onSongRetry(event);

    hasPlayedCutscene = true;
    cutsceneSkipped = true;
    canSkipCutscene = false;

    // resets the tankmen!
    if (tankmanGroup != null)
    {
      tankmanGroup.scriptCall('reset');
    }
    if (PlayState.instance.currentStage.getGirlfriend() != null)
    {
      PlayState.instance.currentStage.getGirlfriend().scriptCall('reset');
      trace('reset pico!');
    }
  }

  /**
   * Replay the cutscene after leaving the song.
   */
  function onCreate(event:ScriptEvent):Void
  {
    super.onCreate(event);

    hasPlayedCutscene = false;
    hasPlayedCutscene = false;
    cutsceneSkipped = false;
    canSkipCutscene = false;
  }

  var hasPlayedEndCutscene:Bool = false;

  var tankmanCutscene:ScriptedFlxAtlasSprite;
  var rimlightCamera:FlxCamera;
  var screenspaceRimlight:DropShadowScreenspace = new DropShadowScreenspace();

  function onUpdate(event:UpdateScriptEvent):Void
  {
    super.onUpdate(event);

    if (FlxG.onMobile)
    {
      isMobilePauseButtonPressed = TouchUtil.overlapsComplex(PlayState.instance.pauseButton) && TouchUtil.justPressed;
    }

    if (PlayState.instance.isInCutscene)
    {
      if ((PlayState.instance.controls.CUTSCENE_ADVANCE || isMobilePauseButtonPressed) && cutsceneSkipped == false)
      {
        if (canSkipCutscene == false)
        {
          trace('cant skip yet!');
          FlxTween.tween(skipText, {alpha: 1}, 0.5, {ease: FlxEase.quadOut});
          new FlxTimer().start(0.5, _ -> 
          {
            canSkipCutscene = true;
            trace('can skip!');
          });
        }
      }
    }

    if ((PlayState.instance.controls.CUTSCENE_ADVANCE || isMobilePauseButtonPressed) && canSkipCutscene)
    {
      
        PlayState.instance.isInCutscene = false;
  if (PlayState.instance.currentVariation == 'default')
    {
        cutsceneSkipped = true;
        canSkipCutscene = false;
        FlxTween.tween(PlayState.instance.camHUD, {alpha: 1}, 1);
        var bf =  PlayState.instance.currentStage.getBoyfriend();
        if (!cutsceneSkipped) PlayState.instance.tweenCameraToPosition(bf.x - 160, bf.y + 80, 2, FlxEase.expoOut);
        PlayState.instance.isInCutscene = false;
        PlayState.instance.currentStage.getDad().visible = true;
        PlayState.instance.currentStage.getGirlfriend().visible = true;
        //PlayState.instance.currentStage.getBoyfriend().visible = true;
        if (tankCutscene != null) tankCutscene.visible = false;
        if (girlCutscene != null) girlCutscene.visible = false;
        noGf = false;
        PlayState.instance.currentStage.getBoyfriend().scriptCall('changeVisibility');
        PlayState.instance.currentStage.getBoyfriend().scriptCall('getBf').visible = false;
        PlayState.instance.currentStage.getBoyfriend().alpha = 1;
        if (tankCutscene != null) tankCutscene.destroy();
        if (girlCutscene != null) girlCutscene.destroy();
        FlxTween.tween(skipText, {alpha: 0}, 0.5, {ease: FlxEase.quadOut});
        cutsceneSkipped = true;
        canSkipCutscene = false;
        if (StressCutsceneSnd != null) StressCutsceneSnd.stop();
        FlxTween.tween(PlayState.instance.camHUD, {alpha: 1}, 1);
          new FlxTimer().start(0.5, function(tmr) {
          PlayState.instance.startCountdown();
          PlayState.instance.tweenCameraZoom(0.9, 1, true, FlxEase.quadInOut);
          PlayState.instance.currentStage.getBoyfriend().danceEvery = 1;
          PlayState.instance.currentStage.getDad().danceEvery = 1;
          PlayState.instance.currentStage.getGirlfriend().danceEvery = 1;
        });
      }
    }

    if (PlayState.instance.isInCutscene)
    {
      if (cutsceneTimerManager != null) cutsceneTimerManager.update(event.elapsed);

      if (rimlightCamera != null)
      {
        rimlightCamera.focusOn(new FlxPoint(PlayState.instance.camGame.viewLeft + PlayState.instance.camGame.viewWidth / 2,
          PlayState.instance.camGame.viewTop + PlayState.instance.camGame.viewHeight / 2));
        rimlightCamera.zoom = PlayState.instance.camGame.zoom;
      }

    }
  }
  var bgSprite:FunkinSprite;

  function onSongEnd(event:CountdownScriptEvent):Void
  {
    super.onSongEnd(event);
    if (PlayState.instance.currentVariation != 'pico') hasPlayedEndCutscene = true;
    // only play this on pico variant..

    if (!hasPlayedEndCutscene)
    {
      hasPlayedEndCutscene = true;

      event.cancel();

      // trace('Adding black background behind cutscene over UI');
      bgSprite = new FunkinSprite(0, 0);
      bgSprite.makeSolidColor(2000, 2500, 0xFF000000);
      bgSprite.cameras = [PlayState.instance.camCutscene]; // Show over the HUD but below the video.
      // this
      bgSprite.zIndex = -10000;
      PlayState.instance.add(bgSprite);
      PlayState.instance.refresh();
      bgSprite.alpha = 0;

      startEndCutscene();
    }
    else
    {
      // Make sure the cutscene can play again next time!
      hasPlayedEndCutscene = false;
      // DO NOT CANCEL THE EVENT!
    }
  }

  var cutsceneTimerManager:FlxTimerManager;

  function startEndCutscene()
  {
    var picoPos:Array<Float> = [
      PlayState.instance.currentStage.getBoyfriend().cameraFocusPoint.x,
      PlayState.instance.currentStage.getBoyfriend().cameraFocusPoint.y
    ];
    var otisPos:Array<Float> = [
      PlayState.instance.currentStage.getGirlfriend().cameraFocusPoint.x,
      PlayState.instance.currentStage.getGirlfriend().cameraFocusPoint.y
    ];
    var tankmanPos:Array<Float> = [
      PlayState.instance.currentStage.getDad().cameraFocusPoint.x,
      PlayState.instance.currentStage.getDad().cameraFocusPoint.y
    ];

    cutsceneTimerManager = new FlxTimerManager();

    // Disable player input during cutscene, so you can't get a gameover during cutscene
    PlayState.instance.isInCutscene = true;
    PlayState.instance.camHUD.visible = false;

    rimlightCamera = new FlxCamera();
    FlxG.cameras.insert(rimlightCamera, (FlxG.onMobile) ? -4 : -2, false);
    rimlightCamera.bgColor = 0x00FFFFFF; // Show the game scene behind the camera.

    screenspaceRimlight.baseBrightness = -46;
    screenspaceRimlight.baseHue = -38;
    screenspaceRimlight.baseContrast = -25;
    screenspaceRimlight.baseSaturation = -20;

    screenspaceRimlight.angle = 45;
    screenspaceRimlight.threshold = 0.3;

    var rimlightFilter:ShaderFilter = new ShaderFilter(screenspaceRimlight);

    rimlightCamera.filters = [rimlightFilter];

    tankmanCutscene = ScriptedFlxAtlasSprite.init('TankmanEndingSprite', 0, 0);
    tankmanCutscene.setPosition(PlayState.instance.currentStage.getDad().x + 723, PlayState.instance.currentStage.getDad().y + 145);

    PlayState.instance.tweenCameraToPosition(tankmanPos[0] + 320, tankmanPos[1] - 70, 2.8, FlxEase.expoOut);
    PlayState.instance.tweenCameraZoom(0.65, 2, true, FlxEase.expoOut);

    PlayState.instance.currentStage.getDad().visible = false;
    PlayState.instance.currentStage.add(tankmanCutscene);
    tankmanCutscene.cameras = [rimlightCamera];

    tankmanCutscene.scriptCall('doAnim');

    new FlxTimer(cutsceneTimerManager).start(176 / 24, _ -> {
      PlayState.instance.currentStage.getBoyfriend().playAnimation('laughEnd', true);
    });

    new FlxTimer(cutsceneTimerManager).start(270 / 24, _ -> {
      PlayState.instance.tweenCameraToPosition(tankmanPos[0] + 320, tankmanPos[1] - 370, 2, FlxEase.quadInOut);
      FlxTween.tween(bgSprite, {alpha: 1}, 2, null);
    });

    new FlxTimer(cutsceneTimerManager).start(320 / 24, _ -> {
      FlxG.cameras.remove(rimlightCamera);
      rimlightCamera = null;
      PlayState.instance.endSong(true);
    });
  }

  function kill():Void
  {
    cleanupTankmanGroup();
  }

  function cleanupTankmanGroup():Void
  {
    if (tankmanGroup != null)
    {
      PlayState.instance.currentStage.remove(tankmanGroup);
      tankmanGroup.destroy();
      tankmanGroup = null;
    }
  }
}