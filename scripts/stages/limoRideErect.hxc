import flixel.FlxG;
import flixel.FlxSprite;
import flixel.util.FlxTimer;
import funkin.audio.FunkinSound;
import funkin.play.stage.Stage;
import funkin.play.PlayState;
import funkin.graphics.shaders.OverlayBlend;
import funkin.graphics.shaders.AdjustColorShader;
import flixel.addons.display.FlxBackdrop;
import funkin.graphics.framebuffer.BitmapDataUtil;
import funkin.graphics.framebuffer.FixedBitmapData;
import funkin.graphics.shaders.OverlayBlend;
import flixel.math.FlxMath;
import flixel.math.FlxPoint;
import flixel.tweens.FlxEase;
import flixel.tweens.FlxTween;
import flixel.util.FlxGradient;
import flixel.util.FlxTimer;
import funkin.Conductor;
import funkin.graphics.shaders.OverlayBlend;
import funkin.graphics.shaders.RuntimeRainShader;
import funkin.modding.base.ScriptedFlxRuntimeShader;
import openfl.filters.BlurFilter;
import openfl.filters.ShaderFilter;
import funkin.util.FlxTweenUtil;
import flixel.addons.display.FlxTiledSprite;
import funkin.graphics.shaders.DropShadowShader;
import funkin.modding.base.ScriptedFunkinSprite;
import funkin.graphics.shaders.DropShadowScreenspace;
import funkin.play.character.CharacterType;
import funkin.play.character.BaseCharacter;
import flixel.math.FlxAngle;
import StringTools;


class LimoRideErectStage extends Stage
{

	var rainShader:RuntimeRainShader = new RuntimeRainShader();
	var rainShaderFilter:ShaderFilter;
	var blurFilter:BlurFilter = new BlurFilter(6, 6);
	var lightning:ScriptedFunkinSprite;

	// as song goes on, these are used to make the rain more intense throught the song
	// these values are also used for the rain sound effect volume intensity!
	var rainShaderStartIntensity:Float;
	var rainShaderEndIntensity:Float;

	var lightningTimer:Float = 3.0;

	function new()
	{
		super('limoRideErect');
	}

  	var colorShader:AdjustColorShader;
	var mist1:FlxBackdrop;
	var mist2:FlxBackdrop;
	var mist3:FlxBackdrop;
	var mist4:FlxBackdrop;
	var mist5:FlxBackdrop;
	var dropColor = 0xFFFFFFFF;

	var shootingStarBeat:Int = 0;
	var shootingStarOffset:Int = 2;

	override function onCreate(event:ScriptEvent):Void
	{
		super.onCreate(event);

		rainShader.scale = FlxG.height / 400; // adjust this value so that the rain looks nice

		FlxG.console.registerObject("rainShader", rainShader);
		switch (PlayState.instance.currentSong.id)
		{
			case "satin-panties":
				rainShaderStartIntensity = 0.4;
				rainShaderEndIntensity = 0.6;
			case "high":
				rainShaderStartIntensity = 0.6;
				rainShaderEndIntensity = 0.7;
			case "milf":
				rainShaderStartIntensity = 0.7;
				rainShaderEndIntensity = 0.8;
		}

		rainShader.intensity = rainShaderStartIntensity;

		rainShaderFilter = new ShaderFilter(rainShader);
		FlxG.camera.filters = [rainShaderFilter];
	}
	var rimBf = new DropShadowShader();
	var rimGf = new DropShadowShader();
	var rimDad = new DropShadowShader();


	override function addCharacter(character:BaseCharacter, charType:CharacterType):Void 
	{
		super.addCharacter(character, charType);

		switch(PlayState.instance.currentVariation) 
		{
    		  case 'erect':
			switch(charType)
			{
				case CharacterType.BF:
					CharacterBf = character;
					character.shader = colorShader;

				case CharacterType.GF:
					CharacterGf = character;
					character.shader = colorShader;

				case CharacterType.DAD:
					CharacterDad = character;
					character.shader = colorShader;

				default:

			}
    		  case 'pico':

			switch(charType)
			{

				case CharacterType.BF:
					CharacterBf = character;

					rimBf.setAdjustColor(-50, -30, 0, -20);	//brightness -> hue -> contrast -> saturation
    				//rimBf.color = 0xFF0B2B33;
					rimBf.color = dropColor;
					character.shader = rimBf;
					rimBf.attachedSprite = character;
					rimBf.angle = 65;
					rimBf.threshold = 0.1;
					rimBf.distance = 15;
					rimBf.strength = 1.15;

					character.animation.onFrameChange.add(function()
					 {
						if (getBoyfriend() != null)
						{
      							rimBf.updateFrameInfo(getBoyfriend().frame);
						}
    					});

				case CharacterType.GF:
					CharacterGf = character;


					rimGf.setAdjustColor(-50, -30, 0, -20);	//brightness -> hue -> contrast -> saturation
    				rimGf.color = 0xFF0B2B33;
					character.shader = rimGf;
					rimGf.attachedSprite = character;
					rimGf.angle = 90;
					rimGf.threshold = 0.1;
					rimGf.distance = 15;
					rimGf.strength = 1.15;


					if (getGirlfriend().characterId == 'nene-car')
					{
						var aBotShader:DropShadowScreenspace;
						
						aBotShader = new DropShadowScreenspace ();
						aBotShader.distance = rimGf.distance;
						aBotShader.angle = rimGf.angle;
						aBotShader.threshold = rimGf.threshold;
						aBotShader.strength = rimGf.strength;
						aBotShader.color = rimGf.color;

						//aBotShader.distance = 9;
						//aBotShader.angle = 25;
						aBotShader.strength = 1.15;
						aBotShader.setAdjustColor(-50, -30, 0, -20);	//brightness -> hue -> contrast -> saturation
					
						getGirlfriend().scriptCall('addShaderAbot', [aBotShader]);
					}

					character.animation.onFrameChange.add(function()
					 {
						if (getGirlfriend() != null)
						{
      							rimGf.updateFrameInfo(getGirlfriend().frame);
						}
    					});

				case CharacterType.DAD:
					CharacterDad = character;

					rimDad.setAdjustColor(-50, -30, 0, -20);	//brightness -> hue -> contrast -> saturation
    				rimDad.color = 0xFF0B2B33;
					character.shader = rimDad;
					rimDad.attachedSprite = character;
					rimDad.angle = 125;
					rimDad.threshold = 0.1;
					rimDad.distance = 15;
					rimDad.strength = 1.15;

					character.animation.onFrameChange.add(function()
					 {
						if (getDad() != null)
						{
      							rimDad.updateFrameInfo(getDad().frame);
						}
    					});
			}
		}

	}

	var scrollingSky:FlxTiledSprite;
	var lampHead:FlxTiledSprite;
	var lampPole:FlxTiledSprite;
	var bg:FlxSprite;

	function buildStage()
	{
		super.buildStage();

		// Apply sky shader.
		var skyOverlay:OverlayBlend = new OverlayBlend();
		var sunOverlay:FlxSprite = new FlxSprite().loadGraphic(Paths.image('limo/limoOverlay'));
		sunOverlay.setGraphicSize(Std.int(sunOverlay.width * 2));
		sunOverlay.updateHitbox();
		skyOverlay.funnyShit.input = sunOverlay.pixels;
		var limoSunset:FlxSprite = getNamedProp('limoSunset');
		if (limoSunset == null) {
			trace('[WARN] Could not retrieve limoSunset');
		} else {
			//limoSunset.shader = skyOverlay;
		}

		// There's some commented-out shader BS in the original code.
		// I don't know what it's for, but it's not used in the game.
		// If you want to re-add it, go find it in version control.

		switch(PlayState.instance.currentVariation)
		{
    	case 'erect':

    		colorShader = new AdjustColorShader();

    		mist1 = new FlxBackdrop(Paths.image('limo/erect/mistMid'), 0x01);
			mist1.setPosition(-650, -100);
			mist1.scrollFactor.set(1.1, 1.1);
			mist1.zIndex = 400;
   			mist1.blend = 0;
			mist1.color = 0xFF313E3F;
			mist1.alpha = 0.4;
			mist1.velocity.x = 1700;

			PlayState.instance.currentStage.add(mist1);
			PlayState.instance.currentStage.refresh(); // Apply z-index.

			mist2 = new FlxBackdrop(Paths.image('limo/erect/mistBack'), 0x01);
			mist2.setPosition(-650, -100);
			mist2.scrollFactor.set(1.2, 1.2);
			mist2.zIndex = 401;
    		mist2.blend = 0;
			mist2.color = 0xFF313E3F;
			mist2.alpha = 1;
			mist2.velocity.x = 2100;
			mist1.scale.set(1.3, 1.3);

			PlayState.instance.currentStage.add(mist2);
			PlayState.instance.currentStage.refresh(); // Apply z-index.

			mist3 = new FlxBackdrop(Paths.image('limo/erect/mistMid'), 0x01);
			mist3.setPosition(-650, -100);
			mist3.scrollFactor.set(0.8, 0.8);
			mist3.zIndex = 99;
   			mist3.blend = 0;
			mist3.color = 0xFFa7d9be;
			mist3.alpha = 0.5;
			mist3.velocity.x = 900;
			mist3.scale.set(1.5, 1.5);

			PlayState.instance.currentStage.add(mist3);
			PlayState.instance.currentStage.refresh(); // Apply z-index.


			mist4 = new FlxBackdrop(Paths.image('limo/erect/mistBack'), 0x01);
			mist4.setPosition(-650, -380);
			mist4.scrollFactor.set(0.6, 0.6);
			mist4.zIndex = 98;
    		mist4.blend = 0;
			mist4.color = 0xFF9c77c7;
			mist4.alpha = 1;
			mist4.velocity.x = 700;
			mist4.scale.set(1.5, 1.5);

			PlayState.instance.currentStage.add(mist4);
			PlayState.instance.currentStage.refresh(); // Apply z-index.

			mist5 = new FlxBackdrop(Paths.image('limo/erect/mistMid'), 0x01);
			mist5.setPosition(-650, -400);
			mist5.scrollFactor.set(0.2, 0.2);
			mist5.zIndex = 15;
   			mist5.blend = 0;
			mist5.color = 0xFFE7A480;
			mist5.alpha = 1;
			mist5.velocity.x = 100;
			mist5.scale.set(1.5, 1.5);

			PlayState.instance.currentStage.add(mist5);
			PlayState.instance.currentStage.refresh(); // Apply z-index.

			getNamedProp('shootingStar').blend = 0;

			resetFastCar();

    	case 'pico':

			dropColor = 0xFF0B2B33;

			rainShader.rainColor = 0xFF0B2B33;

			scrollingSky = new FlxTiledSprite(Paths.image('limo/erect/storm'), 3153, 898, true, false);
			scrollingSky.setPosition(-650, -55);
			scrollingSky.scrollFactor.set(0, 0);
			scrollingSky.zIndex = 14;
			scrollingSky.scale.set(1, 1);
			scrollingSky.alpha = .9;
			scrollingSky.blend = 1;

			PlayState.instance.currentStage.add(scrollingSky);
			PlayState.instance.currentStage.refresh(); // Apply z-index.

			lampHead = new FlxTiledSprite(Paths.image('limo/erect/highwayLight'), 1480, 339, true, false);
			lampHead.setPosition(-100, 75);
			lampHead.scrollX = 2000;
			lampHead.scrollFactor.set(0.1, .4);
			lampHead.zIndex = 18;
			lampHead.scale.set(1.5, 1.5);
			//lampHead.alpha = 1;
			lampHead.blend = 1;

			PlayState.instance.currentStage.add(lampHead);
			PlayState.instance.currentStage.refresh(); // Apply z-index.

			lampPole = new FlxTiledSprite(Paths.image('limo/erect/highwayPoleTall'), 1480, 959, true, false);
			lampPole.setPosition(-90, 110);
			lampPole.scrollX = 2000;
			lampPole.scrollFactor.set(0.1, .4);
			lampPole.zIndex = 16;
			lampPole.scale.set(1.5, 1.5);
			//lampPole.alpha = 1;
			//lampPole.blend = 1;

			PlayState.instance.currentStage.add(lampPole);
			PlayState.instance.currentStage.refresh(); // Apply z-index.

			colorShader = new AdjustColorShader();

			colorShader.hue = -30;
			colorShader.saturation = -20;
			colorShader.contrast = 0;
			colorShader.brightness = -60;


		 	getNamedProp('limoDancer1').shader = colorShader;   
      		getNamedProp('limoDancer2').shader = colorShader;
  			getNamedProp('limoDancer3').shader = colorShader;
    		getNamedProp('limoDancer4').shader = colorShader;
     		getNamedProp('limoDancer5').shader = colorShader;
     		getNamedProp('fastCar').shader = colorShader;


			lightning = ScriptedFunkinSprite.init('Lightning');
			lightning.zIndex = 15;
    		PlayState.instance.currentStage.add(lightning);
    		PlayState.instance.currentStage.refresh(); // Apply z-index.

			//mist oh my fucking god its so damn long
				mist1 = new FlxBackdrop(Paths.image('limo/erect/mistMid'), 0x01);
				mist1.setPosition(-650, -100);
				mist1.scrollFactor.set(1.1, 1.1);
				mist1.zIndex = 400;
   				mist1.blend = 12;
				mist1.color = 0xFF313E3F;
				mist1.alpha = 1;
				mist1.velocity.x = 3200;

				PlayState.instance.currentStage.add(mist1);
				PlayState.instance.currentStage.refresh(); // Apply z-index.

				mist2 = new FlxBackdrop(Paths.image('limo/erect/mistBack'), 0x01);
				mist2.setPosition(-650, -100);
				mist2.scrollFactor.set(1.2, 1.2);
				mist2.zIndex = 401;
    			mist2.blend = 12;
				mist2.color = 0xFF313E3F;
				mist2.alpha = 1;
				mist2.velocity.x = 4200;
				mist1.scale.set(1.3, 1.3);

				PlayState.instance.currentStage.add(mist2);
				PlayState.instance.currentStage.refresh(); // Apply z-index.

				mist3 = new FlxBackdrop(Paths.image('limo/erect/mistMid'), 0x01);
				mist3.setPosition(-650, -100);
				mist3.scrollFactor.set(0.8, 0.8);
				mist3.zIndex = 99;
   				mist3.blend = 12;
				mist3.color = 0xFF313E3F;
				mist3.alpha = 1;
				mist3.velocity.x = 1800;
				mist3.scale.set(1.5, 1.5);

				PlayState.instance.currentStage.add(mist3);
				PlayState.instance.currentStage.refresh(); // Apply z-index.


				mist4 = new FlxBackdrop(Paths.image('limo/erect/mistBack'), 0x01);
				mist4.setPosition(-650, -380);
				mist4.scrollFactor.set(0.6, 0.6);
				mist4.zIndex = 98;
    			mist4.blend = 12;
				mist4.color = 0xFF313E3F;
				mist4.alpha = 1;
				mist4.velocity.x = 1400;
				mist4.scale.set(1.5, 1.5);

				PlayState.instance.currentStage.add(mist4);
				PlayState.instance.currentStage.refresh(); // Apply z-index.

				mist5 = new FlxBackdrop(Paths.image('limo/erect/mistMid'), 0x01);
				mist5.setPosition(-650, -400);
				mist5.scrollFactor.set(0.2, 0.2);
				mist5.zIndex = 15;
   				mist5.blend = 12;
				mist5.color = 0xFF313E3F;
				mist5.alpha = 1;
				mist5.velocity.x = 200;
				mist5.scale.set(1.5, 1.5);

				PlayState.instance.currentStage.add(mist5);
				PlayState.instance.currentStage.refresh(); // Apply z-index.

				bg = FlxGradient.createGradientFlxSprite(FlxG.width, FlxG.height, [0xFFffffff, 0xFF000000], 1, 90, true);
				bg.scrollFactor.set(0, 0);
				bg.zIndex = 1500;
   				bg.blend = 0;
				bg.alpha = 0;
				bg.scale.set(1.5, 1.5);
				bg.setPosition(0, 0);
				PlayState.instance.currentStage.add(bg);
				PlayState.instance.currentStage.refresh(); // Apply z-index.

		}

	}

	var _timer:Float = 0;

  function onUpdate(event:UpdateScriptEvent):Void
	{
		super.onUpdate(event);

		switch(PlayState.instance.currentVariation) 
		{
    	 case 'erect':
		  

			_timer += event.elapsed;
			mist1.y = 100 + (Math.sin(_timer)*200);
			mist2.y = 0 + (Math.sin(_timer*0.8)*100);
			mist3.y = -20 + (Math.sin(_timer*0.5)*200);
			mist4.y = -180 + (Math.sin(_timer*0.4)*300);
			mist5.y = -450 + (Math.sin(_timer*0.2)*150);
			//trace(mist1.y);

   			if(PlayState.instance.currentStage.getBoyfriend() != null && PlayState.instance.currentStage.getBoyfriend().shader == null)
	        {
      			PlayState.instance.currentStage.getBoyfriend().shader = colorShader;
		 	 PlayState.instance.currentStage.getGirlfriend().shader = colorShader;
		 	 PlayState.instance.currentStage.getDad().shader = colorShader;
		 	 getNamedProp('limoDancer1').shader = colorShader;   
      			getNamedProp('limoDancer2').shader = colorShader;
  			  getNamedProp('limoDancer3').shader = colorShader;
    		  getNamedProp('limoDancer4').shader = colorShader;
     		 getNamedProp('limoDancer5').shader = colorShader;
     		 getNamedProp('fastCar').shader = colorShader;
   			 }

    	 case 'pico':

			if (FlxG.sound.music != null)
			{
			var remappedIntensityValue:Float = FlxMath.remapToRange(Conductor.instance.songPosition, 0, FlxG.sound.music.length, rainShaderStartIntensity, rainShaderEndIntensity);
			rainShader.intensity = remappedIntensityValue*1.5;
			rainShader.updateViewInfo(FlxG.width, FlxG.height, FlxG.camera);
			rainShader.update(event.elapsed);
			}
			else
			{
			rainShader.intensity = rainShaderStartIntensity*1.5;
			rainShader.updateViewInfo(FlxG.width, FlxG.height, FlxG.camera);
			rainShader.update(event.elapsed);
			}

			if(scrollingSky != null) scrollingSky.scrollX += FlxG.elapsed * 66;
			if(lampHead != null) lampHead.scrollX += FlxG.elapsed * 256*10;
			if(lampPole != null) lampPole.scrollX += FlxG.elapsed * 256*10;

			_timer += event.elapsed;
			mist1.y = 100 + (Math.sin(_timer)*50);
			mist2.y = 0 + (Math.sin(_timer*0.8)*50);
			mist3.y = -20 + (Math.sin(_timer*0.5)*100);
			mist4.y = -180 + (Math.sin(_timer*0.4)*150);
			mist5.y = -450 + (Math.sin(_timer*0.2)*75);

			if (lightning != null) {
				lightningTimer -= FlxG.elapsed;
			} else {
				lightningTimer = 1;
			}

			if (lightningTimer <= 0) {
				lightning.scriptCall('strike');
				lightningTimer = FlxG.random.float(7, 15);
				FunkinSound.playOnce(Paths.soundRandom('Lightning', 1, 3), 1.0);
				lightningStrike();
		}
		}
   }

	function lightningStrike():Void
	{
		var timer = new FlxTimer();
		var Tween:FlxTween;
		Tween = FlxTween.tween(bg, {alpha: 1 }, .25, {ease: FlxEase.elasticInOut});
		timer.start(.25, function() 
      	{
			Tween = FlxTween.tween(bg, {alpha: 0 }, .5, {ease: FlxEase.elasticInOut});

					Tween = FlxTween.tween(bg, {alpha: 1 }, .5, {ease: FlxEase.elasticInOut});
					timer.start(.25, function() 
      				{
					Tween = FlxTween.tween(bg, {alpha: 0 }, .5, {ease: FlxEase.elasticInOut});
					});
		});
	}

	function doShootingStar(beat:Int):Void
	{
		getNamedProp('shootingStar').x = FlxG.random.int(50,900);
		getNamedProp('shootingStar').y = FlxG.random.int(-10,20);
		getNamedProp('shootingStar').flipX = FlxG.random.bool(50);
		getNamedProp('shootingStar').animation.play('shooting star');

		shootingStarBeat = beat;
		shootingStarOffset = FlxG.random.int(4, 8);

	}

	function onBeatHit(event:SongTimeScriptEvent)
	{
		// When overriding onBeatHit, make sure to call super.onBeatHit,
		// otherwise boppers will not work.
		super.onBeatHit(event);

		if (FlxG.random.bool(10) && fastCarCanDrive)
			fastCarDrive();

		if (PlayState.instance.currentVariation != 'pico' && FlxG.random.bool(10) && event.beat > (shootingStarBeat + shootingStarOffset))
		{
			doShootingStar(event.beat);
		}
	}

	var fastCarCanDrive:Bool = false;

	function resetFastCar():Void
	{
		var fastCar = getNamedProp('fastCar');

		if (fastCar == null)
			return;

		// Props are inactive by default.
		// Set active to true so position is calculated based on velocity.
		fastCar.active = true;

		fastCar.x = -12600;
		fastCar.y = FlxG.random.int(140, 250);
		fastCar.velocity.x = 0;
		fastCarCanDrive = true;
	}

	function fastCarDrive():Void
	{
		FunkinSound.playOnce(Paths.soundRandom('carPass', 0, 1), 0.7);

		var fastCar = getNamedProp('fastCar');
		fastCar.velocity.x = (FlxG.random.int(170, 220) / FlxG.elapsed) * 3;
		fastCarCanDrive = false;
		new FlxTimer().start(2, function(tmr:FlxTimer)
		{
			resetFastCar();
		});
	}

	/**
	 * If your stage uses additional assets not specified in the JSON,
	 * make sure to specify them like this, or they won't get cached in the loading screen.
	 */
	function fetchAssetPaths():Array<String>
	{
		var results:Array<String> = super.fetchAssetPaths();

		// This graphic is applied by shader to the background, so it's not included in the default stage function.
		results.push(Paths.image('limo/limoOverlay'));
		results.push(Paths.sound('carPass0'));
		results.push(Paths.sound('carPass1'));

		return results;
	}

	/**
	 * Make sure the fast car is reset when the song restarts.
	 */
	function onSongRetry(event:ScriptEvent) {
		super.onSongRetry(event);
		resetFastCar();
		shootingStarBeat = 0;
		shootingStarOffset = 2;
	}

	/**
	 * Make sure the fast car is reset when the song restarts.
	 */
	function onCountdownStart(event:ScriptEvent) {
		super.onCountdownStart(event);
		resetFastCar();
	}
}