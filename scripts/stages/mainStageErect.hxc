import flixel.FlxG;
import flixel.FlxSprite;
import flixel.addons.display.FlxRuntimeShader;
import flixel.sound.FlxSound;
import funkin.Conductor;
import funkin.modding.base.ScriptedFlxRuntimeShader;
import funkin.graphics.shaders.AdjustColorShader;
import funkin.play.PlayState;
import funkin.play.stage.Stage;
import funkin.graphics.adobeanimate.FlxAtlasSprite;
import funkin.modding.base.ScriptedFlxAtlasSprite;

import funkin.graphics.shaders.DropShadowShader;
import funkin.play.character.CharacterType;
import funkin.play.character.BaseCharacter;
import openfl.display.BitmapData;
import flixel.graphics.FlxGraphic;
import flixel.math.FlxAngle;


class MainStageErectStage extends Stage
{

	var CharacterBf:BaseCharacter;
	var CharacterGf:BaseCharacter;
	var CharacterDad:BaseCharacter;

  	var colorShaderBf:AdjustColorShader;
  	var colorShaderDad:AdjustColorShader;
  	var colorShaderGf:AdjustColorShader;

	function new()
	{
		super('mainStageErect');

    		colorShaderBf = new AdjustColorShader();
    		colorShaderDad = new AdjustColorShader();
   		colorShaderGf = new AdjustColorShader();

	}


	public override function onCountdownStart(event:CountdownScriptEvent):Void {
		super.onCountdownStart(event);
	}


	override function addCharacter(character:BaseCharacter, charType:CharacterType):Void 
	{
		super.addCharacter(character, charType);

		switch(PlayState.instance.currentVariation) 
		{
    		  case 'erect':
			switch(charType)
			{
				case CharacterType.BF:
					CharacterBf = character;

				case CharacterType.GF:
					CharacterGf = character;

				case CharacterType.DAD:
					CharacterDad = character;

				default:

			}
    		  case 'pico':

			var rim = new DropShadowShader();

			switch(charType)
			{
				case CharacterType.BF:
					CharacterBf = character;
			
					rim.setAdjustColor(-46, -38, -25, -20);
    					rim.color = 0xFFE8EDB8;
					character.shader = rim;
					rim.attachedSprite = character;
					rim.angle = 65;
					rim.threshold = 0.1;
					rim.distance = 15;
					rim.strength = 1.05;

					character.animation.onFrameChange.add(function()
					 {
						if (getBoyfriend() != null)
						{
      							rim.updateFrameInfo(getBoyfriend().frame);
						}
    					});

				case CharacterType.GF:
					CharacterGf = character;


					rim.setAdjustColor(-46, -38, -25, -20);
    					rim.color = 0xFFE8B6B8;
					character.shader = rim;
					rim.attachedSprite = character;
					rim.angle = 45;
					rim.threshold = 0.1;
					rim.distance = 12;
					rim.strength = 1.05;


					if (getGirlfriend().characterId == 'nene')
					{
						var aBotShader:DropShadowShader;
						
						aBotShader = new DropShadowShader();
						aBotShader.distance = rim.distance;
						aBotShader.angle = rim.angle;
						aBotShader.threshold = rim.threshold;
						aBotShader.strength = rim.strength;
						aBotShader.color = rim.color;

						aBotShader.distance = 0;
					
						getGirlfriend().scriptCall('addShaderAbot', [aBotShader]);
					}

					character.animation.onFrameChange.add(function()
					 {
						if (getGirlfriend() != null)
						{
      							rim.updateFrameInfo(getGirlfriend().frame);
						}
    					});

				case CharacterType.DAD:
					CharacterDad = character;

					rim.setAdjustColor(-46, -38, -25, -20);
    					rim.color = 0xFFA3B6B8;
					character.shader = rim;
					rim.attachedSprite = character;
					rim.angle = 25;
					rim.threshold = 0.1;
					rim.distance = 12;
					rim.strength = 1.05;

					character.animation.onFrameChange.add(function()
					 {
						if (getDad() != null)
						{
      							rim.updateFrameInfo(getDad().frame);
						}
    					});
			}
		}

	}


	function buildStage()
	{
		super.buildStage();

	switch(PlayState.instance.currentVariation) {
    	  case 'erect':

    		colorShaderBf.brightness = -23;
    		colorShaderBf.hue = 12;
    		colorShaderBf.contrast = 7;
		colorShaderBf.saturation = 0;

		colorShaderGf.brightness = -30;
		colorShaderGf.hue = -9;
    		colorShaderGf.contrast = -4;
		colorShaderGf.saturation = 0;

    		colorShaderDad.brightness = -33;
    		colorShaderDad.hue = -32;
    		colorShaderDad.contrast = -23;
		colorShaderDad.saturation = 0;

    		getNamedProp('brightLightSmall').blend = 0;
    		getNamedProp('orangeLight').blend = 0;
    		getNamedProp('lightgreen').blend = 0;
    		getNamedProp('lightred').blend = 0;
    		getNamedProp('lightAbove').blend = 0;

    	  case 'pico':

  		var colorShaderBg:AdjustColorShader;
    		colorShaderBg = new AdjustColorShader();
  		var colorShaderLight:AdjustColorShader;
    		colorShaderLight = new AdjustColorShader();

    		getNamedProp('brightLightSmall').blend = 0;
    		getNamedProp('orangeLight').blend = 0;
    		getNamedProp('lightgreen').blend = 0;
    		getNamedProp('lightred').blend = 0;
    		getNamedProp('lightAbove').blend = 0;

    		getNamedProp('orangeLight').zIndex = 600;

    		colorShaderBg.brightness = -19;
    		colorShaderBg.hue = -20;
    		colorShaderBg.contrast = 0;
		colorShaderBg.saturation = -15;

    		colorShaderLight.brightness = 0;
    		colorShaderLight.hue = 0;
    		colorShaderLight.contrast = 0;
		colorShaderLight.saturation = -55;


    		getNamedProp('backDark').shader = colorShaderBg;
    		getNamedProp('brightLightSmall').shader = colorShaderLight;
    		//getNamedProp('brightLightSmall').visible = false;
    		getNamedProp('crowd').shader = colorShaderBg;
    		getNamedProp('bg').shader = colorShaderBg;
    		getNamedProp('server').shader = colorShaderBg;
    		getNamedProp('lights').shader = colorShaderBg;
    		getNamedProp('orangeLight').shader = colorShaderBg;
    		//getNamedProp('orangeLight').visible = false;
    		getNamedProp('lightgreen').shader = colorShaderBg;
    		getNamedProp('lightred').shader = colorShaderBg;
    		getNamedProp('lightAbove').shader = colorShaderLight;
    		//getNamedProp('lightAbove').visible = false;

		}
	}

	function onBeatHit(event:SongTimeScriptEvent):Void
	{
		super.onBeatHit(event);
	}

  function onStepHit(event:SongTimeScriptEvent):Void
	{
		super.onStepHit(event);
	}
}
