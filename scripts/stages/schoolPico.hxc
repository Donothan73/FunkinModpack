import flixel.FlxG;
import flixel.FlxSprite;
import flixel.math.FlxMath;
import flixel.math.FlxPoint;
import flixel.tweens.FlxEase;
import flixel.tweens.FlxTween;
import flixel.util.FlxTimer;
import funkin.audio.FunkinSound;
import funkin.audio.FunkinSound;
import funkin.Conductor;
import funkin.graphics.framebuffer.BitmapDataUtil;
import funkin.graphics.framebuffer.FixedBitmapData;
import funkin.graphics.shaders.OverlayBlend;
import funkin.graphics.shaders.RuntimeRainShader;
import funkin.graphics.shaders.MosaicEffect;
import funkin.modding.base.ScriptedFlxRuntimeShader;
import funkin.play.PlayState;
import funkin.play.stage.Stage;
import openfl.filters.BlurFilter;
import openfl.filters.ShaderFilter;
import funkin.util.FlxTweenUtil;
import flixel.addons.display.FlxTiledSprite;
import StringTools;
import funkin.graphics.shaders.DropShadowShader;
import funkin.play.character.CharacterType;

class SchoolPicoStage extends Stage
{

  var rainShader:RuntimeRainShader = new RuntimeRainShader();
  //var rainPixelShader:PixelShader = new PixelShader();
  var rainShaderFilter:ShaderFilter;
  //var rainPixelFilter:ShaderFilter;
  var blurFilter:BlurFilter = new BlurFilter(6, 6);

  // as song goes on, these are used to make the rain more intense throught the song
  // these values are also used for the rain sound effect volume intensity!
  var rainShaderStartIntensity:Float;
  var rainShaderEndIntensity:Float;

  function new()
  {
    super('schoolPico');
  }

  function buildStage()
  {
    super.buildStage();

    PlayState.instance.camHUD.pixelPerfectRender = true;
    PlayState.instance.camGame.pixelPerfectRender = true;

    if (PlayState.instance.currentSong.id.toLowerCase() == "roses")
    {
      getNamedProp('freaks').idleSuffix = '-scared';
    }
    else
    {
      getNamedProp('freaks').idleSuffix = '';
    }
  }

override function onCreate(event:ScriptEvent):Void
  {
    super.onCreate(event);

    rainShader.scale = FlxG.height / 2000; // adjust this value so that the rain looks nice

    rainPixelShader.setBlockSize(4.0, 4.0);

    FlxG.console.registerObject("rainShader", rainShader);
    switch (PlayState.instance.currentSong.id)
    {
      case "senpai":
        rainShaderStartIntensity = 0;
        rainShaderEndIntensity = 0.3;
      case "roses":
        rainShaderStartIntensity = 0.3;
        rainShaderEndIntensity = 0.6;
      default:
        rainShaderStartIntensity = 0.2;
        rainShaderEndIntensity = 0.4;
    }

    rainShader.intensity = rainShaderStartIntensity;

    // set the shader input
    // rainShader.mask = frameBufferMan.getFrameBuffer("mask");
    // rainShader.lightMap = frameBufferMan.getFrameBuffer("lightmap");

    rainShaderFilter = new ShaderFilter(rainShader);
    //rainPixelFilter = new ShaderFilter(rainPixelShader);
    //PlayState.instance.camHUD.filters = [rainShaderFilter, rainPixelFilter];
    // FlxG.camera.setFilters([new openfl.filters.BlurFilter(16,16)]);

  }

override function onUpdate(event:UpdateScriptEvent)
  {
    super.onUpdate(event);

    if (FlxG.sound.music != null)
    {
      var remappedIntensityValue:Float = FlxMath.remapToRange(Conductor.instance.songPosition, 0, FlxG.sound.music.length, rainShaderStartIntensity,
        rainShaderEndIntensity);
      rainShader.intensity = remappedIntensityValue;
      rainShader.updateViewInfo(FlxG.width, FlxG.height, FlxG.camera);
      rainShader.update(event.elapsed);
    }
    else
    {
      rainShader.intensity = rainShaderStartIntensity;
      rainShader.updateViewInfo(FlxG.width, FlxG.height, FlxG.camera);
      rainShader.update(event.elapsed);
    }
  }

  override function onGameOver(event:ScriptEvent):Void
  {
    super.onGameOver(event);
    // Make it so the rain shader doesn't show over the game over screen
    FlxG.camera.filters = [];
  }

  override function onSongRetry(event:ScriptEvent):Void
  {
    super.onSongRetry(event);
    // Make it so the rain shader doesn't show over the game over screen
    // FlxG.camera.setFilters([rainShaderFilter]);

    FlxG.camera.filters = [rainShaderFilter];
  }

  override function addCharacter(character:BaseCharacter, charType:CharacterType):Void
  {
    // Apply the shader automatically to each character as it gets added.
    super.addCharacter(character, charType);
    trace('Applied stage shader to ' + character.characterName);

    var rim = new DropShadowShader();
    rim.setAdjustColor(-66, -10, 24, -23);
    rim.antialiasAmt = 0;
    rim.color = 0xFF52351d;
    rim.attachedSprite = character;
    rim.distance = 5;

    switch (charType)
    {
      case CharacterType.BF:
        rim.angle = 90;
        character.shader = rim;

        rim.loadAltMask('assets/week6/images/weeb/erect/masks/picoPixel_mask.png');
        rim.maskThreshold = 1;
        rim.useAltMask = true;

        character.animation.onFrameChange.add(function() {
          if (getBoyfriend() != null)
          {
            rim.updateFrameInfo(getBoyfriend().frame);
          }
        });

      case CharacterType.GF:
        rim.angle = 90;
        character.shader = rim;

        rim.loadAltMask('assets/week6/images/weeb/erect/masks/nenePixel_mask.png');
        rim.maskThreshold = 1;
        rim.useAltMask = true;

        character.scriptCall('addSunsetShaders');

        character.animation.onFrameChange.add(function() {
          if (getGirlfriend() != null)
          {
            rim.updateFrameInfo(getGirlfriend().frame);
          }
        });

      case CharacterType.DAD:
        rim.angle = 90;
        character.shader = rim;

        rim.loadAltMask('assets/week6/images/weeb/erect/masks/senpai_mask.png');
        rim.maskThreshold = 1;
        rim.useAltMask = true;

        character.animation.onFrameChange.add(function() {
          if (getDad() != null)
          {
            rim.updateFrameInfo(getDad().frame);
          }
        });

      default:
    }
  }
}
