import flixel.FlxG;
import flixel.FlxSprite;
import flixel.math.FlxMath;
import flixel.math.FlxPoint;
import flixel.tweens.FlxEase;
import flixel.tweens.FlxTween;
import flixel.util.FlxTimer;
import funkin.audio.FunkinSound;
import funkin.audio.FunkinSound;
import funkin.Conductor;
import funkin.graphics.framebuffer.BitmapDataUtil;
import funkin.graphics.framebuffer.FixedBitmapData;
import funkin.graphics.shaders.OverlayBlend;
import funkin.graphics.shaders.RuntimeRainShader;
import funkin.graphics.shaders.MosaicEffect;
import funkin.modding.base.ScriptedFlxRuntimeShader;
import funkin.play.PlayState;
import funkin.play.stage.Stage;
import openfl.filters.BlurFilter;
import openfl.filters.ShaderFilter;
import funkin.util.FlxTweenUtil;
import flixel.addons.display.FlxTiledSprite;
import StringTools;
import funkin.graphics.shaders.DropShadowShader;
import funkin.play.character.CharacterType;
import funkin.graphics.FunkinCamera;
import flixel.util.FlxColor;
import funkin.graphics.shaders.AdjustColorShader;

class SchoolPicoStage extends Stage
{

  var rainShader:RuntimeRainShader = new RuntimeRainShader(Assets.getText(Paths.frag('rainPixel')));
  var rainShaderFilter:ShaderFilter;
  var rainPixelFilter:ShaderFilter;
  var camRain:FunkinCamera;

  // as song goes on, these are used to make the rain more intense throught the song
  // these values are also used for the rain sound effect volume intensity!
  var rainShaderStartIntensity:Float;
  var rainShaderEndIntensity:Float;

  function new()
  {
    super('schoolPico');
  }

  function buildStage()
  {
    super.buildStage();

    camRain = new FunkinCamera('camRain', 0, 0, FlxG.width, FlxG.height, 1);
    camRain.bgColor = FlxColor.TRANSPARENT;
    FlxG.cameras.add(camRain, false);

    rainShader.scale = FlxG.height / 260; // adjust this value so that the rain looks nice
    rainShaderFilter = new ShaderFilter(rainShader);
    PlayState.instance.camGame.filters = [rainShaderFilter];
    rainShader.rainColor = 0xFF5D3D3D;
    rainShader.scale = 6;

    if (FlxG.save.data.week6pixel == true) PlayState.instance.camHUD.pixelPerfectRender = true;
    if (FlxG.save.data.week6pixel == true) PlayState.instance.camGame.pixelPerfectRender = true;

    rainShader.intensity = rainShaderStartIntensity;

    var colorShaderBg:AdjustColorShader;
    colorShaderBg = new AdjustColorShader();
    

    colorShaderBg.brightness = -60;
    colorShaderBg.hue = -37;
    colorShaderBg.contrast = 34;
		colorShaderBg.saturation = -23;

    //(-120, -30, 34, -23);

    for (prop in namedProps)
    {
      //prop.cameras = [camRain, PlayState.instance.camGame];
      prop.shader = colorShaderBg;
    }

  }

override function onCreate(event:ScriptEvent):Void
  {
    super.onCreate(event);

    FlxG.console.registerObject("rainShader", rainShader);
    switch (PlayState.instance.currentSong.id)
    {
      case "senpai":
        rainShaderStartIntensity = 0;
        rainShaderEndIntensity = 0.4;
      case "roses":
        rainShaderStartIntensity = 0.4;
        rainShaderEndIntensity = 0.8;
      default:
        rainShaderStartIntensity = 0.2;
        rainShaderEndIntensity = 0.4;
    }

    rainShader.intensity = rainShaderStartIntensity;

  }

  var step:Float = 0;

  override function onUpdate(event:UpdateScriptEvent)
  {
    super.onUpdate(event);

    step += 1*Conductor.instance.beatLengthMs / 1000 * 16;

    if(step > 24)
    {
      if (FlxG.sound.music != null)
      {
        var remappedIntensityValue:Float = FlxMath.remapToRange(Conductor.instance.songPosition, 0, FlxG.sound.music.length, rainShaderStartIntensity,
        rainShaderEndIntensity);
        rainShader.intensity = remappedIntensityValue;
        rainShader.updateViewInfo(FlxG.width, FlxG.height, PlayState.instance.camGame);
        rainShader.update(event.elapsed);
        step = 0;
      }
      else
      {
        rainShader.intensity = rainShaderStartIntensity;
        rainShader.updateViewInfo(FlxG.width, FlxG.height, PlayState.instance.camGame);
        rainShader.update(event.elapsed);
        step = 0;
      }
    }
  }

  override function onGameOver(event:ScriptEvent):Void
  {
    super.onGameOver(event);
    // Make it so the rain shader doesn't show over the game over screen
    camRain.filters = [];
  }

  override function onSongRetry(event:ScriptEvent):Void
  {
    super.onSongRetry(event);
    // Make it so the rain shader doesn't show over the game over screen
    // FlxG.camera.setFilters([rainShaderFilter]);

    camRain.filters = [rainShaderFilter];
  }

  override function addCharacter(character:BaseCharacter, charType:CharacterType):Void
  {
    // Apply the shader automatically to each character as it gets added.
    super.addCharacter(character, charType);
    trace('Applied stage shader to ' + character.characterName);

    var rim = new DropShadowShader();
    //rim.setAdjustColor(-66, -20, 24, -23);
    rim.setAdjustColor(-120, -30, 34, -23);
    rim.antialiasAmt = 0;
    rim.color = 0xFF453468;
    rim.attachedSprite = character;
    rim.strength = .9;
    rim.distance = 0;

    switch (charType)
    {
      case CharacterType.BF:
        rim.angle = 90;
        character.shader = rim;

        rim.loadAltMask('assets/week6/images/weeb/erect/masks/picoPixel_mask.png');
        rim.maskThreshold = 1;
        rim.useAltMask = true;

        character.animation.onFrameChange.add(function() {
          if (getBoyfriend() != null)
          {
            rim.updateFrameInfo(getBoyfriend().frame);
          }
        });

      case CharacterType.GF:
        rim.angle = 90;
        character.shader = rim;

        rim.loadAltMask('assets/week6/images/weeb/erect/masks/nenePixel_mask.png');
        rim.maskThreshold = 1;
        rim.useAltMask = true;

        character.scriptCall('addSunsetShaders');

        character.animation.onFrameChange.add(function() {
          if (getGirlfriend() != null)
          {
            rim.updateFrameInfo(getGirlfriend().frame);
          }
        });

      case CharacterType.DAD:
        rim.angle = 90;
        character.shader = rim;

        rim.loadAltMask('assets/week6/images/weeb/erect/masks/senpai_mask.png');
        rim.maskThreshold = 1;
        rim.useAltMask = true;

        character.animation.onFrameChange.add(function() {
          if (getDad() != null)
          {
            rim.updateFrameInfo(getDad().frame);
          }
        });

      default:
    }
  }
}
