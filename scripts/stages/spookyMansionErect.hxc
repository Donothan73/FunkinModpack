import flixel.FlxG;
import funkin.audio.FunkinSound;
import funkin.play.PlayState;
import funkin.play.stage.Stage;
import flixel.tweens.FlxEase;
import flixel.tweens.FlxTween;
import funkin.util.FlxTweenUtil;
import funkin.util.HapticUtil;
import funkin.util.Constants;
import flixel.util.FlxTimer;
import funkin.play.character.BaseCharacter;
import funkin.play.character.CharacterDataParser;
import funkin.play.character.CharacterType;
import funkin.play.PlayState;
import funkin.graphics.shaders.RuntimeRainShader;
import funkin.graphics.shaders.AdjustColorShader;

class SpookyMansionErectStage extends Stage
{
  function new()
  {
    super('spookyMansionErect');
  }

  var rainShaderTarget:FlxSprite;
  var rainShader:RuntimeRainShader = new RuntimeRainShader();

  var lightningStrikeBeat:Int = 0;
  var lightningStrikeOffset:Int = 8;

  var colorShader:AdjustColorShader;

  override function onCreate(event:ScriptEvent):Void
  {
    super.onCreate(event);

    trace('Applying rain shader...');

    // adjust this value so that the rain looks nice
    rainShader.spriteMode = true;

    rainShaderTarget = getNamedProp('bgTrees');
    rainShaderTarget.shader = rainShader;
    rainShaderTarget.animation.onFrameChange.add(onBranchFrame);
  }

  function onBranchFrame(name, frameNum, frameIndex)
  {
    rainShader.updateFrameInfo(rainShaderTarget.frame);
  }

  override function buildStage()
  {
    super.buildStage();
    getNamedProp('bgLight').alpha = 0.0001;
    getNamedProp('stairsLight').alpha = 0.0001;

    switch (PlayState.instance.currentVariation)
    {
      default:
        rainShader.scale = FlxG.height / 200 * 2;
        rainShader.intensity = 0.4;
      case 'pico':

        colorShader = new AdjustColorShader();

        rainShader.scale = FlxG.height / 200 * 1;
        rainShader.intensity = 0.8;

        colorShader.brightness = -23;
    		colorShader.hue = 52;
    		colorShader.contrast = 23;
			  colorShader.saturation = -10;

        getNamedProp('bgTrees').color = 0xFFD79B;
        getNamedProp('bgDark').shader = colorShader;
        getNamedProp('stairsDark').shader = colorShader;

    }
  }

  override function addCharacter(character:BaseCharacter, charType:CharacterType):Void 
	{
		super.addCharacter(character, charType);

		switch(PlayState.instance.currentVariation) 
		{
    	case 'pico':
			  switch(charType)
			  {
				  case CharacterType.BF:
					  CharacterBf = character;
					  character.shader = colorShader;

				  case CharacterType.GF:
					  CharacterGf = character;
					  character.shader = colorShader;

            //A-Bot already has a shader...
            //var abotShader = new AdjustColorShader();
            //abotShader.brightness = colorShader.brightness + -12;
    		    //abotShader.hue = colorShader.hue + -26;
    		    //abotShader.contrast = colorShader.contrast + 0;
			      //abotShader.saturation = colorShader.saturation + -45;
            //character.abot.shader = abotShader;

            character.abot.color = 0xFFD79B;

				  case CharacterType.DAD:
					  CharacterDad = character;
					  character.shader = colorShader;
        }
			default:
		}
  }

  override function onUpdate(event:UpdateScriptEvent)
  {
    super.onUpdate(event);
    rainShader.update(event.elapsed);
  }

  function doLightningStrike(playSound:Bool, beat:Int):Void
  {
    if (getBoyfriend() == null || getGirlfriend() == null || getDad() == null) return;

    if (playSound)
    {
      FunkinSound.playOnce(Paths.soundRandom('thunder_', 1, 2), 1.0);
    }

    // getNamedProp('halloweenBG').animation.play('lightning');
    getNamedProp('bgLight').alpha = 1;
    getNamedProp('stairsLight').alpha = 1;
    getBoyfriend().alpha = 0;
    getDad().alpha = 0;
    getGirlfriend().alpha = 0;

    new FlxTimer().start(0.06, function(_) {
      getNamedProp('bgLight').alpha = 0;
      getNamedProp('stairsLight').alpha = 0;
      getBoyfriend().alpha = 1;
      getDad().alpha = 1;
      getGirlfriend().alpha = 1;
    });

    new FlxTimer().start(0.12, function(_) {
      getNamedProp('bgLight').alpha = 1;
      getNamedProp('stairsLight').alpha = 1;
      getBoyfriend().alpha = 0;
      getDad().alpha = 0;
      getGirlfriend().alpha = 0;
      FlxTween.tween(getNamedProp('bgLight'), {alpha: 0}, 1.5);
      FlxTween.tween(getNamedProp('stairsLight'), {alpha: 0}, 1.5);
      FlxTween.tween(getBoyfriend(), {alpha: 1}, 1.5);
      FlxTween.tween(getDad(), {alpha: 1}, 1.5);
      FlxTween.tween(getGirlfriend(), {alpha: 1}, 1.5);
    });

    lightningStrikeBeat = beat;
    lightningStrikeOffset = FlxG.random.int(8, 24);

    if (getBoyfriend().hasAnimation('scared') && getBoyfriend().animation.name != 'cheer')
    {
      getBoyfriend().playAnimation('scared', true, true);
    }

    if (getGirlfriend().hasAnimation('scared'))
    {
      getGirlfriend().playAnimation('scared', true, true);
    }

    triggerLightningHaptics();
  }

  var doPostShockHaptics:Bool = false;

  function triggerLightningHaptics()
  {
    HapticUtil.vibrate(0, 0.05, 1);

    doPostShockHaptics = true;
  }

  /**
   * If your stage uses additional assets not specified in the JSON,
   * make sure to specify them like this, or they won't get cached in the loading screen.
   */
  function fetchAssetPaths():Array<String>
  {
    var results:Array<String> = super.fetchAssetPaths();
    results.push(Paths.sound('thunder_1'));
    results.push(Paths.sound('thunder_2'));
    return results;
  }

  function onBeatHit(event:SongTimeScriptEvent)
  {
    super.onBeatHit(event);

    // Play lightning on sync at the start of this specific song.
    // TODO: Rework this after chart format redesign.
    if (PlayState.instance.currentSong != null)
    {
      if (event.beat == 4 && PlayState.instance.currentSong.id == "spookeez")
      {
        doLightningStrike(false, event.beat);
      }
    }

    // Play lightning at random intervals.
    if (FlxG.random.bool(10) && event.beat > (lightningStrikeBeat + lightningStrikeOffset))
    {
      doLightningStrike(true, event.beat);
    }
  }

  var postShockCounter:Int = 0;
  var counterTargetNum:Int = 10;

  function onStepHit(event:SongTimeScriptEvent)
  {
    super.onStepHit(event);

    if (doPostShockHaptics)
    {
      postShockCounter++;

      var postShockAmplitude:Float = 0.05 * (counterTargetNum - postShockCounter) * 2.5;
      HapticUtil.vibrate(0, 0.01, postShockAmplitude, 0);

      if (postShockCounter == counterTargetNum)
      {
        doPostShockHaptics = false;
        postShockCounter = 0;
      }
    }
  }

  function onSongRetry(event:ScriptEvent)
  {
    super.onSongRetry(event);

    // Properly reset lightning when restarting the song.
    lightningStrikeBeat = 0;
    lightningStrikeOffset = 8;
  }
}
