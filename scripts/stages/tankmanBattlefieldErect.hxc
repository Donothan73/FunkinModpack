import flixel.FlxG;
import flixel.math.FlxAngle;
import funkin.play.PlayState;
import funkin.play.stage.Stage;
import funkin.graphics.shaders.AdjustColorShader;
import funkin.play.character.CharacterType;
import openfl.display.BitmapData;
import flixel.graphics.FlxGraphic;

import funkin.graphics.shaders.GaussianBlurShader;
import openfl.filters.ShaderFilter;
import flixel.addons.display.FlxTiledSprite;
import flixel.math.FlxMath;
import funkin.graphics.shaders.WiggleEffectRuntime;
import funkin.graphics.shaders.WiggleEffectType;
import funkin.Conductor;

class TankmanBattlefieldErectStage extends Stage
{
  var adjustColor:AdjustColorShader;
  var brickShader:AdjustColorShader;
  var dust:FlxTiledSprite;

  var waveFreq:Float = (Conductor.instance.beatLengthMs / 1000) * 16;
  var waveSpeed:Float = (Conductor.instance.beatLengthMs / 1000) * 2;

  var dustShader:FlxRuntimeShader = null;

  var blurShader = new GaussianBlurShader(0.5);

  function new()
  {
    super('tankmanBattlefieldErect');

    adjustColor = new AdjustColorShader();

    adjustColor.hue = 20;
    adjustColor.saturation = -23;
    adjustColor.brightness = 25;
    adjustColor.contrast = 3;

    brickShader = new AdjustColorShader(); //yes

    brickShader.hue = 0;
    brickShader.saturation = -43;
    brickShader.brightness = 25;
    brickShader.contrast = 3;

    dustShader = new WiggleEffectRuntime(waveSpeed * 4, waveFreq * 0.4, 0.05, WiggleEffectType.DREAMY);
    
  }

  function onCreate(event:ScriptEvent):Void
  {
    super.onCreate(event);

    blurShaderFilter = new ShaderFilter(blurShader);
    PlayState.instance.camGame.filters = [blurShaderFilter];
  }

  public function buildStage()
  {
    super.buildStage();
    getNamedProp('tankBricks').shader = brickShader;
    getNamedProp('storm').blend = 12;

    dust = new FlxTiledSprite(Paths.image('erect/day/dustBlur'), FlxG.width*2.5, FlxG.height*2.5, true, true);
    dust.setPosition(FlxG.width/2 - dust.width/2, FlxG.height/2 - dust.height/2);
    dust.scrollFactor.set(0.1, 0.1);
    dust.zIndex = 750;
    dust.scale.set(1, 1);
    dust.shader = dustShader;

    PlayState.instance.currentStage.add(dust);
    PlayState.instance.currentStage.refresh(); // Apply z-index.
  }

  public function onGameOver(event:ScriptEvent)
  {
    super.onGameOver(event);
    getBoyfriend().shader = null;
    PlayState.instance.camGame.filters =[];
  }

  override function addCharacter(character:BaseCharacter, charType:CharacterType):Void
  {
    // Apply the shader automatically to each character as it gets added.
    super.addCharacter(character, charType);
    trace('Applied stage shader to ' + character.characterName);

    character.shader = adjustColor;

    if (getGirlfriend().characterId == 'gf-tankmen' || getGirlfriend().characterId == 'nene-tankmen')
    {
      getGirlfriend().scriptGet('tankmenBottomL').shader = adjustColor;
      getGirlfriend().scriptGet('tankmenTopL').shader = adjustColor;
      getGirlfriend().scriptGet('tankmenBottomR').shader = adjustColor;
      getGirlfriend().scriptGet('tankmenTopR').shader = adjustColor;
    }

  }

  /**
   * Called when the chart hits a song event.
   */
  public override function onSongEvent(scriptEvent:SongEventScriptEvent)
  {
    super.onSongEvent(scriptEvent);

  }

  function onUpdate(event:UpdateScriptEvent):Void
  {
    super.onUpdate(event);

    if (dust != null)
    {
      dust.scrollX -= (Math.sin(FlxG.elapsed*0.8)*100) * FlxG.elapsed * 100 * 25;
      dust.scrollY = (Math.sin(FlxG.elapsed*0.8)*50);
      
    }
  }

  function onBeatHit(event:SongTimeScriptEvent):Void
  {
    super.onBeatHit(event);

    if (FlxG.random.bool(2))
    {
      getNamedProp('sniper').playAnimation('sip', false, true);
    }
  }

  function onSongRetry(event:ScriptEvent)
  {
    super.onSongRetry(event);

    PlayState.instance.camGame.filters = [blurShaderFilter];

    if (getGirlfriend().characterId == 'otis-speaker')
    {
      getNamedProp('tankBricks').setPosition(445, 774);
    }
  }
}
